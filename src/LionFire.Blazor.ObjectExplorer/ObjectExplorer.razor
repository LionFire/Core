@page "/explorer"
@using System.Reflection;

<MudIconButton Icon="@Icons.Material.ArrowBackIos" Style="@("opacity:" + (History.Count == 0 ? "0.2" : "1"))" @onclick=@Back></MudIconButton>
<MudIconButton Icon="@Icons.Material.ArrowForwardIos" Style="@("opacity:" + (ForwardHistory.Count == 0 ? "0.2" : "1"))" @onclick=@Forward></MudIconButton>
<MudIconButton Icon="@Icons.Material.Refresh" @onclick=@Refresh></MudIconButton>

@{
    bool isFirst = false;
}

@foreach (var pathChunk in BreadCrumbPath.Reverse())
{
    if (isFirst)
    {
        isFirst = false;
    }
    else
    {
        <span style="opacity: 0.5; font-size: 24px; position: relative; bottom: -4px;">&nbsp;/&nbsp;</span>
    }
    <span>@pathChunk</span>
}

@if (CurrentObject == null)
{
    <div>(No object)</div>
}
else if (!CurrentObject.GetType().GetProperties().Any())
{
    <div>No properties</div>
}
else
{
    <table>
        @foreach (var mi in CurrentObject.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Cast<MemberInfo>()
    .Concat(CurrentObject.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))
    )
        {
            if(!CanShow(mi)) { continue; }
            var pi = mi as PropertyInfo;
            var fi = mi as FieldInfo;
            

            object val;
            if (pi != null) val = pi.GetValue(CurrentObject);
            else val = fi.GetValue(CurrentObject);

            var miType = pi != null ? pi.PropertyType : fi.FieldType;

            bool isPublic = pi != null ? pi.GetGetMethod().IsPublic : fi.IsPublic;
            Color color = isPublic ? Color.Default : Color.Dark;
            Variant variant = isPublic ? Variant.Outlined : Variant.Filled;

            <tr>
                <td>
                    <div style="margin-right: 10px;">
                        @if (pi != null)
                        {<MudChip Size="Size.Small" Color="color" Variant="variant">P</MudChip> }
                        else
                        { <MudChip Size="Size.Small" Color="color" Variant="variant">F</MudChip>}
                    </div>
                </td>
                <td>
                    @mi.Name
                </td>
                <td style="width: 10px;"></td>
                <td>
                    <MudTooltip Text="@(val?.GetType().Name ?? miType.Name)">
                        @if (CanOpen(val))
                        {
                            <a href="#" class="@(CanOpen(val) ? "CanOpen" : "")" @onclick="@(e => Push(val, mi.Name))" @onclick:preventDefault="true">@val</a>
                        }
                        else
                        {
                            @val
                        }
                    </MudTooltip>
                </td>
                <td>
                </td>
            </tr>
        }
    </table>
}

@code {

    [Parameter]
    public object CurrentObject { get; set; }

    Stack<object> History = new Stack<object>();
    Stack<string> BreadCrumbPath = new Stack<string>();
    Stack<KeyValuePair<object, string>> ForwardHistory2 = new Stack<KeyValuePair<object, string>>();
    Stack<object> ForwardHistory = new Stack<object>();
    Stack<string> ForwardBreadCrumbHistory = new Stack<string>();

    protected override Task OnInitializedAsync()
    {
        CurrentObject ??= Assembly.GetEntryAssembly().GetTypes();
        BreadCrumbPath.Push(CurrentObject.GetType().FullName);
        return base.OnInitializedAsync();
    }

    bool CanShow(MemberInfo mi)
    {
        if(mi.Name.EndsWith("__BackingField")) { return false; }
        var pi = mi as PropertyInfo;
        if (pi != null && (!pi.CanRead || pi.GetIndexParameters().Any() || pi.GetGetMethod() == null)) { return false; }

        return true;
    }
    bool CanOpen(object obj)
    {
        return obj != null && obj.GetType() != typeof(string) && !obj.GetType().IsPrimitive && (obj.GetType().GetProperties().Any() || obj.GetType().GetFields().Any());
    }

    void Pop()
    {
        BreadCrumbPath.Pop();
        CurrentObject = History.Pop();
    }

    void Push(object val, string name)
    {
        if (val == null) return;
        if (ForwardHistory.Any() && Object.ReferenceEquals(ForwardHistory.Peek(), val))
        {
            Forward();
            return;
        }

        History.Push(CurrentObject);
        BreadCrumbPath.Push(name);
        ForwardHistory.Clear();
        ForwardBreadCrumbHistory.Clear();
        CurrentObject = val;
    }


    void Back()
    {
        if (History.Count > 0)
        {
            Pop();
        }
    }
    void Forward()
    {
        if (ForwardHistory.Count == 0) { return; }

        Push(ForwardHistory.Pop(), ForwardBreadCrumbHistory.Pop());
    }
    void Refresh()
    {
        var old = CurrentObject;
        CurrentObject = string.Empty;
        StateHasChanged();
        CurrentObject = old;
    }
}
